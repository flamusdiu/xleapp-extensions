[tool.poetry]
name = "xleapp-extensions"
version = "0.1.0"
description = "xLEAPP Artifacts (free)"
authors = ["Jesse Spangenberger <azuleonyx@digitalforensics.io>"]
license = "MIT"

readme = "README.md"

homepage = "https://github.com/flamusdiu/xleapp"
repository = "https://github.com/flamusdiu/xleapp-extensions"
documentation = "https://github.com/flamusdiu/xleapp"

keywords = ["forensics", "dfir", "security", "framework"]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
bplist = "^1.1"
astc_decomp = "^1.0.3"
blackboxprotobuf = "^1.0.1"
bs4 = "^0.0.1"
nska-deserialize = "^1.3.2"
pandas = "^2.0.1"
pyliblzfse = "^0.4.1"
defusedxml = "^0.7.1"
Pillow = "^9.5.0"
packaging = "^23.1"

atomicwrites = {version = "^1.4.1", optional = true}
black = {version = "^23.3.0", optional = true}
mypy = {version = "^1.2.0", optional = true}
pre-commit = {version = "^3.2.2", optional = true}
pyfakefs = {version = "^5.2.2", optional = true}
pyinstaller = {version = "^5.10.1", optional = true}
pytest = {version = "^7.3.1", optional = true}
pytest-cache = {version = "^1.0", optional = true}
pytest-cov = {version = "^4.0.0", optional = true}
pytest-dependency = {version = "^0.5.1", optional = true}
pytest-mock = {version = "^3.10.0", optional = true}
recommonmark ={version =  "^0.7.1", optional = true}
requests = {version = "^2.28.2", optional = true}
sphinx = {version = "^6.2.0", optional = true}
sphinx-rtd-theme = {version = "^1.2.0", optional = true}
sphinxcontrib-images = {version = "^0.9.4", optional = true}
sphinxcontrib-mermaid = {version = "^0.8.1", optional = true}
sphinxcontrib-napoleon = {version = "^0.7", optional = true}
tox = {version = "^4.5.0", optional = true}
tqdm = {version = "^4.64.0", optional = true}
types-Jinja2 = {version = "^2.11.9", optional = true}
types-pillow = {version = "^9.5.0.1", optional = true}
types-PyYAML = {version = "^6.0.9", optional = true}


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins]

[tool.poetry.plugins."xleapp.plugins"]
"extensions" = "xleapp_extensions:__init__"

[tool.ruff]
line-length = 90
update-check = false
target-version = "py39"
fix = true
unfixable = ["E711"]

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # flake8-2020
  "YTT",
  # flake8-bugbear
  "B",
  # flake8-quotes
  "Q",
  # pylint
  "PLE", "PLR", "PLW",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
  # type-checking imports
  "TCH",
]

# exclude chat_rendering.py until tested/fixed
exclude = [
  "chat_rendering.py",
  "**/helpers/parsers"
]

# A003: ignore shared variables in a class
# C901: Checks for functions with a high `McCabe` complexity.
# D107: don't need docstrings for __init__ method of classes.
#       Infavor of documenting at the top of classes instead of inside __init__ methods.
# D203: 1 blank line required before class docstring.
# E203: Whitespace before ":"
# S101: Checks for uses of the `assert` keyword.
# W503: Line breaks should occur after the binary operator to keep
#       all variable names aligned. Disabled infavor of W504 (PEP8 updates)
# Q000: Remove bad quotes
# PLR2004: Magic value used in comparison, consider replacing it with a constant variable
# PLR0912: Too many branches
# PLR0913: Too many arguments to function call
# PLR0915: Too many statements
ignore = [
  "A003",
  "D107",
  "D203",
  # "E203",  # not yet implemented
  "E501",
  "Q000",
  # "W503",  # not yet implemented,
  "PLR0913"
]

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401", "E501"]
"**/gui/__init__.py" = ["C901"]
"**/types.py" = ["F401"]
"tests/**" = ["S101", "D107"]
"**/plugins/**" = ["PLR2004", "PLR0912", "PLR0915"]

[tool.pylint.messages_control]
max-line-length = 90
disable = [
 # intentionally turned off
  "bad-mcs-classmethod-argument",
  "broad-except",
  "c-extension-no-member",
  "comparison-with-itself",
  "consider-using-enumerate",
  "import-error",
  "import-outside-toplevel",
  "invalid-name",
  "invalid-unary-operand-type",
  "line-too-long",
  "no-else-continue",
  "no-else-raise",
  "no-else-return",
  "no-member",
  "no-name-in-module",
  "not-an-iterable",
  "overridden-final-method",
  "pointless-statement",
  "redundant-keyword-arg",
  "singleton-comparison",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-function-args",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "unexpected-keyword-arg",
  "ungrouped-imports",
  "unsubscriptable-object",
  "unsupported-assignment-operation",
  "unsupported-membership-test",
  "unused-import",
  "use-dict-literal",
  "use-implicit-booleaness-not-comparison",
  "use-implicit-booleaness-not-len",
  "wrong-import-order",
  "wrong-import-position",
  "redefined-loop-name",

 # misc
  "abstract-class-instantiated",
  "no-value-for-parameter",
  "undefined-variable",
  "unpacking-non-sequence",
  "used-before-assignment",

 # pylint type "C": convention, for programming standard violation
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "superfluous-parens",
  "too-many-lines",
  "unidiomatic-typecheck",
  "unnecessary-dunder-call",
  "unnecessary-lambda-assignment",

  # pylint type "R": refactor, for bad code smell
  "consider-using-with",
  "cyclic-import",
  "duplicate-code",
  "inconsistent-return-statements",
  "redefined-argument-from-local",
  "too-few-public-methods",

  # pylint type "W": warning, for python specific problems
  "abstract-method",
  "arguments-differ",
  "arguments-out-of-order",
  "arguments-renamed",
  "attribute-defined-outside-init",
  "broad-exception-raised",
  "comparison-with-callable",
  "dangerous-default-value",
  "deprecated-module",
  "eval-used",
  "expression-not-assigned",
  "fixme",
  "global-statement",
  "invalid-overridden-method",
  "keyword-arg-before-vararg",
  "possibly-unused-variable",
  "protected-access",
  "raise-missing-from",
  "redefined-builtin",
  "redefined-outer-name",
  "self-cls-assignment",
  "signature-differs",
  "super-init-not-called",
  "try-except-raise",
  "unnecessary-lambda",
  "unspecified-encoding",
  "unused-argument",
  "unused-variable",
  "using-constant-test"
]

[tool.isort]
profile = "black"
atomic = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
line_length = 90
include_trailing_comma = true
skip = [
  ".eggs",
  ".git",
  ".venv",
  "_build"
]
skip_glob = [
  "src/**/helpers/parsers"
]
src_paths = ["src, tests"]

[tool.black]
line_length = 90
include = '\.pyi?$'
target_version = ["py39"]
exclude = '''
/(
    | \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | helpers/parsers
)/
'''

[tool.pyright]
pythonVersion = "3.9"
typeCheckignMode = "basic"
include = ["src/xleapp"]
exclude = [
  "**/__pycache__",
  "src/xleapp/tests",
  "src/**/helpers/parsers",
  "src/xleapp/report/chat_rendering.py"
]
defineConstant = { DEBUG = true }

# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.poetry.extras]
# Test dependencies as extras so they can be set as extras in tox config
# More info on https://github.com/python-poetry/poetry/issues/1941
tests = [
  "atomicwrites",
  "pre-commit",
  "pyfakefs",
  "pytest",
  "pytest-cache",
  "pytest-cov",
  "pytest-dependency",
  "pytest-mock",
  "tqdm",
  "tox"
]
vscode = [
  "requests",
  "tqdm"
]
lint = [
  "black",
  "ruff",
  "types-PyYAML",
  "types-Jinja2",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vv --cov=xleapp --cov-report xml --cov-report html --ignore=data"
testpaths = [
  "tests",
]
